##
#
# PowerFolder-Server
#    starts default PowerFolder server
#
##

description     "default PowerFolder server"
author		"Benedikt Wegmann <benedikt.wegmann@gwdg.de"

#
# Starting conditions
#
start on (net-device-up IFACE!=lo and remote-filesystems and local-filesystems)
stop on [016]

#
# Run the service under a restricted user
#
setuid powerfolder
setgid powerfolder

#
# Set umask and user limits
#
umask 0027
limit nofile 32000 64000        

#
# If system runs out of memory Java is the likely culprit. Kill it.
#
oom score 250

#
# SERVER_INSTALL needs to point to the directory
# where the .jar file is located.
#
env SERVER_INSTALL=/opt/gwdg-cloud-share-server

#
# JAVA_MEM specifies some memory settings vor the Java
# virtual machine
#
# If running on a 64-bit system with more than 4GB ram
# or if facing an out-of-memory error the value for the
# -Xmx parameter can be raised (example: -Xmx2g,-Xmx4g,
# -Xmx6g,...), so the virtual machine will be allowed
# to use more memory during runtime.
#
env JAVA_MEM="-Xms256m -Xmx1g -XX:NewRatio=8 -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -Xincgc"

#
# Remote connection/console port (accepts only commands from localhost)
#
env SERVER_RCON=1338

#
# Names
#
env BINARY_NAME="PowerFolder-Server"
env DIST_NAME="PowerFolder Server"

#
# Language configuration
#
env LC_ALL=en_US.UTF-8
env LANG=en_US.UTF-8

pre-start script
    #
    # Check .jar file existance
    #
    if [ ! -f "$SERVER_INSTALL/PowerFolder-Server.jar" ]
    then
        echo "PowerFolder-Server.jar does not exist in the $SERVER_INSTALL directory. Please check if SERVER_INSTALL is set in the PowerFolder-Server.sh file or if PowerFolder-Server.jar exists under the specified path!"
        stop
        exit 1
    fi

    if ! id powerfolder; then
        stop
        exit 2
    fi

end script

script
    #
    # Unset DISPLAY variable
    #
    unset DISPLAY

    #
    # SERVER_HOME sets the location where the server
    # will store data like the configuration file,
    # internal database, keys, etc. A hidden sub-directory
    # with the binary name will be created in that directory.
    # PLEASE NOTE: By default this is the user's home
    # directory. When you change that, you also need to
    # change the symlink to your .config file, which
    # resides in your SERVER_INSTALL directory!
    #
    SERVER_HOME="$(getent passwd powerfolder | cut -d ':' -f 6)"
    
    #
    # Set correct Java version
    #
    if [ `getconf LONG_BIT` = "64" ]
    then
        RUN_JAVA="$SERVER_INSTALL/jre64/bin/java"
    else
        RUN_JAVA="$SERVER_INSTALL/jre32/bin/java"
    fi

    #
    # If there is a template for PowerFolder-Folder.config use it.
    #
    if [ -f ${SERVER_HOME}/.PowerFolder/PowerFolder-Folder.config.template ]; then
        cp ${SERVER_HOME}/.PowerFolder/PowerFolder-Folder.config.template ${SERVER_HOME}/.PowerFolder/PowerFolder-Folder.config
        SERVER_MAINTENANCE_DIR=$(sed -n 's/.*\.dir=\(.*\)/\1/p' ${SERVER_HOME}/.PowerFolder/PowerFolder-Folder.config.template)
        mkdir -p "${SERVER_MAINTENANCE_DIR}"
    fi

    #
    # If there is a template for PowerFolder.config use it.
    #
    if [ -f ${SERVER_HOME}/.PowerFolder/PowerFolder.config.template ]; then
        cp -a ${SERVER_HOME}/.PowerFolder/PowerFolder.config.template ${SERVER_HOME}/.PowerFolder/PowerFolder.config-newtmp
        if [ -f ${SERVER_HOME}/.PowerFolder/PowerFolder.config ]; then
            grep -E "^nodeid=" ${SERVER_HOME}/.PowerFolder/PowerFolder.config >> ${SERVER_HOME}/.PowerFolder/PowerFolder.config-newtmp
        fi
        cp -a ${SERVER_HOME}/.PowerFolder/PowerFolder.config-newtmp ${SERVER_HOME}/.PowerFolder/PowerFolder.config
    fi

    #
    # Check for a PowerFolder.config.
    # Previous steps should have prepared a valid config file.
    #
    if [ ! -f ${SERVER_HOME}/.PowerFolder/PowerFolder.config ]; then
        echo "PowerFolder.config does not exist in the $SERVER_HOME directory. Please provide a PowerFolder.config.template in $SERVER_HOME/.PowerFolder/ !"
        stop
        exit 3
    fi

    #
    # Set Java classpath
    #
    CP="$CLASSPATH:$SERVER_INSTALL/PowerFolder-Server.jar:$SERVER_INSTALL/libs/*"
    
    #
    # Setup individual upload directory
    #
    UPLOAD_DIR_PARM=""
    if [ -r ${SERVER_HOME}/.PowerFolder/PowerFolder.config ]; then
        FOLDER_BASEPATH=$(sed -n 's/foldersbase=\(.*\)/\1/p' ${SERVER_HOME}/.PowerFolder/PowerFolder.config)
        UPLOAD_DIR_PATH="${FOLDER_BASEPATH}/$(hostname)_uploads"
        mkdir -p ${UPLOAD_DIR_PATH}
        if touch ${UPLOAD_DIR_PATH}/touchtest ; then
            UPLOAD_DIR_PARM="-Djava.io.tmpdir=${UPLOAD_DIR_PATH}";
            rm ${UPLOAD_DIR_PATH}/touchtest
            else echo "WARN: Not using custom upload path."
        fi
    fi
    
    #
    # Set command line to invoke program start
    #
    RUN_CMD="$RUN_JAVA $JAVA_MEM $UPLOAD_DIR_PARM -Duser.home=$SERVER_HOME -Dpf.install.dir=$SERVER_INSTALL -cp $CP -server de.dal33t.Start"

    $RUN_CMD
    
end script
