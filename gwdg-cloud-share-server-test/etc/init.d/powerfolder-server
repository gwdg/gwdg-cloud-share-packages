#! /bin/sh
### BEGIN INIT INFO
# Provides:          PowerFolder
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Powerfolder initscript
# Description:       Startet PowerFolder
#
### END INIT INFO

################
################ DEBUG!!!!
#exit 0
################
################

# Author: Benedikt Wegmann <benedikt.wegmann@gwdg.de>

# Do NOT "set -e"

# check running as root
if [ "$(id -u)" -ne "0" ]; then echo "Error: you have to be root"; exit 66; fi

###
# Set this as appropriate
SERVER_INSTALL=/opt/gwdg-cloud-share-server
SERVER_USER=powerfolder
###

SERVER_HOME=$( getent passwd "$SERVER_USER" | cut -d: -f6 )
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="PowerFolder-Server"
NAME=PowerFolder-Server
DAEMON=$SERVER_INSTALL/$NAME.sh
PIDFILE=$SERVER_HOME/PowerFolder-Server.pid
SCRIPTNAME=/etc/init.d/$NAME

# Increase ulimit
ulimit -n 32000

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Validate found PID file
validate_PID_file()
{
	if [ -r $PIDFILE ]; then
		ps --no-headers -p $(cat $PIDFILE) >/dev/null 2>&1
		RC=$?
		if [ "$RC" -ne "0" ]; then
			rm $PIDFILE
			return 0
		else return 0
		fi
	else return 0
	fi
}

#
# Function that starts the daemon/service
#
do_start()
{
	validate_PID_file
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --chdir $SERVER_HOME/ --chuid $SERVER_USER --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --chdir $SERVER_HOME/ --chuid $SERVER_USER --quiet --pidfile $PIDFILE --exec $DAEMON start \
		|| return 2
	sleep 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --start --chdir $SERVER_HOME/ --chuid $SERVER_USER --exec $DAEMON stop
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
